.data 
FirstInteger: .asciiz "Enter first integer: " 
SecondInteger: .asciiz "Enter second integer: "

.text
	main:
	la $a0, FirstInteger	#
	li $v0, 4		# show FirstInteger message
	syscall			#
	
	li $v0, 5		#
	syscall			# read input
	move $t0, $v0		#
	
	la $a0, SecondInteger	#
	li $v0, 4		# show secondInteger message
	syscall			#
	
	li $v0, 5		#
	syscall			# read input
	move $t1, $v0		#
	
	la $t2, 0 #load counter	
	
	loop:		
	bgt $t0, $t1 exit		# if loop is over
	beq $t0, 1, incrementfirst	# if firstInteger is one continue, because 1 is not prime number
	
	la $t3, 2			# start nested loop with 2
	la $t4, 0			# mark that current number is prime
	
		nestedLoop:
		bgt $t3, $t0 checkAndIncrement		# if nested loop is over	
		beq $t0, $t3, nextIteration		# if i==j continue; 
		
		div $t0, $t3	# check if current number is prime
		mfhi $t5	# reminder
				
		beqz $t5 incrementfirst		# current number is not prime
		
		add $t3, $t3, 1
		j nestedLoop
	
	j loop
	
	nextIteration:		#
	add $t3, $t3, 1		# nestedLoop's iteration
	j nestedLoop		#
	
	incrementfirst:
	add $t0, $t0, 1		# loop's iteration
	la $t4, 1		# mark that is not prime
	j loop
	
	checkAndIncrement:
	beqz $t4, incrementCounter	#check if its prime ($t7 == 0, if prime)
	
	incrementCounter:	#
	add $t2, $t2, 1		# increment counter
	j incrementfirst	#
	
	
	exit:
	li $v0, 1	#
	move $a0, $t2	#	show counter's value
	syscall		#
	
	li $v0, 10	#
			#	exit
	syscall		#